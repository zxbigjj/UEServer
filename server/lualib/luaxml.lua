local base = _G

require("LuaXML_lib")

-- symbolic name for tag index, this allows accessing the tag by var[xml.TAG]
TAG = 0

local encode = xml.encode
local load = xml.load
local eval = xml.eval
local registerCode = xml.registerCode

-- sets or returns tag of a LuaXML object
local function tag(var,tag)
  if base.type(var)~="table" then return end
  if base.type(tag)=="nil" then 
    return var[TAG]
  end
  var[TAG] = tag
end

-- creates a new LuaXML object either by setting the metatable of an existing Lua table or by setting its tag
local function new(arg)
  if base.type(arg)=="table" then 
    base.setmetatable(arg,{__index=xml, __tostring=xml.str})
    return arg
  end
  local var={}
  base.setmetatable(var,{__index=xml, __tostring=xml.str})
  if base.type(arg)=="string" then var[TAG]=arg end
  return var
end

-- appends a new subordinate LuaXML object to an existing one, optionally sets tag
local function append(var,tag)
  if base.type(var)~="table" then return end
  local newVar = xml.new(tag)
  var[#var+1] = newVar
  return newVar
end

-- converts any Lua var into an XML string
local function str(var,indent,tagValue)
  if base.type(var)=="nil" then return end
  local indent = indent or 0
  local indentStr=""
  for i = 1,indent do indentStr=indentStr.."  " end
  local tableStr=""
  
  if base.type(var)=="table" then
    local tag = var[0] or tagValue or base.type(var)
    local s = indentStr.."<"..tag
    for k,v in base.pairs(var) do -- attributes 
      if base.type(k)=="string" then
        if base.type(v)=="table" and k~="_M" then --  otherwise recursiveness imminent
          tableStr = tableStr..str(v,indent+1,k)
        else
          s = s.." "..k.."=\""..encode(base.tostring(v)).."\""
        end
      end
    end
    if #var==0 and #tableStr==0 then
      s = s.." />\n"
    elseif #var==1 and base.type(var[1])~="table" and #tableStr==0 then -- single element
      s = s..">"..encode(base.tostring(var[1])).."</"..tag..">\n"
    else
      s = s..">\n"
      for k,v in base.ipairs(var) do -- elements
        if base.type(v)=="string" then
          s = s..indentStr.."  "..encode(v).." \n"
        else
          s = s..str(v,indent+1)
        end
      end
      s=s..tableStr..indentStr.."</"..tag..">\n"
    end
    return s
  else
    local tag = base.type(var)
    return indentStr.."<"..tag.."> "..encode(base.tostring(var)).." </"..tag..">\n"
  end
end


-- saves a Lua var as xml file
local function save(var,filename)
  if not var then return end
  if not filename or #filename==0 then return end
  local file = base.io.open(filename,"w")
  file:write("<?xml version=\"1.0\"?>\n<!-- file \"",filename, "\", generated by LuaXML -->\n\n")
  file:write(str(var))
  base.io.close(file)
end


-- recursively parses a Lua table for a substatement fitting to the provided tag and attribute
local function find(var, tag, attributeKey,attributeValue)
  -- check input:
  if base.type(var)~="table" then return end
  if base.type(tag)=="string" and #tag==0 then tag=nil end
  if base.type(attributeKey)~="string" or #attributeKey==0 then attributeKey=nil end
  if base.type(attributeValue)=="string" and #attributeValue==0 then attributeValue=nil end
  -- compare this table:
  if tag~=nil then
    if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then
      base.setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  else
    if attributeValue == nil or var[attributeKey]==attributeValue then
      base.setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  end
  -- recursively parse subtags:
  for k,v in base.ipairs(var) do
    if base.type(v)=="table" then
      local ret = find(v, tag, attributeKey,attributeValue)
      if ret ~= nil then return ret end
    end
  end
end

xml.find = find
xml.save = save
xml.str = str
xml.append = append
xml.tag = tag
xml.new = new

local function test()
  local aaa = [==[
<?xml version="1.0" encoding="iso-8859-1"?>
<XperiML version="2.0">
  <!--  application info -->
  <applicationInfo>
    <string id="author">     S&#228;lly.Doe@t&#252;bingen.de </string>
    <string id="version">    0.5.0                         </string>
    <string id="date">       2004-11-23 - 2006-08-18       </string>
    <string id="shortDescr"> a demonstration application for LuaXML scripting </string>
    <string id="usage">      [ -i(ini.xml) ] </string>
  </applicationInfo>

<!--  initialization of the window -->
  <deviceWindow id="0" name="window" deviceContainer="input">
    <string id="winTitle">   my window </string>
    <float id="mouseRelative">     0 </float>
    <float id="mouseNeutral">    0.0 </float>
    <bool id="mouseVisible">       0 </bool>
    <bool id="fullScreen">         0 </bool>
    <int  id="zBufferBits">       24 </int>
    <int  id="stencilBufferBits">  0 </int>

    <int id="winSizeX">        800 </int>
    <int id="winSizeY">        600 </int>
    <floatArray id="bgColor"> 0.5 0.6 0.7 </floatArray>

    <!-- 2d visualization / overlay initialization -->
    <overlay>
      <floatArray id="bgNormalColor"> 1.0 1.0 1.0 0.2 </floatArray>
      <floatArray id="fgNormalColor"> 1.0 0.0 1.0 0.7 </floatArray>
      <floatArray id="bgSelectColor"> 0.0 0.5 1.0 0.7 </floatArray>
      <floatArray id="fgSelectColor"> 1.0 1.0 1.0 1.0 </floatArray>
      <!-- overlay plane minimum and maximum coordinates -->
      <float id="minX"> -1.0 </float>
      <float id="minY"> -1.0 </float>
      <float id="maxX">  1.0 </float>
      <float id="maxY">  1.0 </float>
    </overlay>

    <!--                 X   Y   Z   H   P   R (output axes) -->
    <axesInputMapping>   0   1   2   3   4   5 </axesInputMapping>
    <axesInputScale>     1   1   1   1   1   1 </axesInputScale>
    <axesInputShift>     0   0   0   0   0   0 </axesInputShift>
  </deviceWindow>

  
  <deviceGraphics id="0">
    <!-- 3d visualization initialization -->
    <float id="nearClipping">  0.1 </float>
    <float id="farClipping">   2000 </float>
    <float id="frustumLeft">  -1.0 </float>
    <float id="frustumRight">  1.0 </float>
    <float id="frustumBottom">-.75 </float>
    <float id="frustumTop">    .75 </float>
    <bool id="backFaceCulling">       1    </bool>
    <!--  camera initialization  -->
    <camera object="observer" pos="0 -3 1.6 0 0 0"/>
  </deviceGraphics>

 <!--  audio device initialization  -->
  <deviceAudio id="0" class="deviceAudioAL">      <!-- specific global settings for OpenAL -->
    <int   id="distanceModel">       1   </int>   <!-- valid arguments are NONE=0, INVERSE_DISTANCE=1 (default), INVERSE_DISTANCE_CLAMPED=2, see OpenAL ref. man. p.21 -->
    <float id="dopplerVelocity">   330.0 </float> <!-- corresponds to sonic speed for doppler effect calculations -->
    <float id="dopplerFactor">       1.0 </float> <!-- additional scaling factor for doppler effect calculations -->
  </deviceAudio>
 
  <!-- internal script definitions -->
  <scripts> 
      <script name="main" mime="application/x-lua">
      <![CDATA[
        -- initialization
        if nFrames==nil then 
          nFrames=0;
          tLastFrames=ve.now();
        end
        
        -- termination
        if obj.getFlag(INPUT,27) then
          ve.exit();
        end
        -- update info line:        
        if ve.now()>=tLastFrames+1.0 then
            tLastFrames=ve.now()
            ovl.text(1,-1,ALIGN_RIGHT,ALIGN_BOTTOM,nFrames," fps");
            nFrames=0;
        end
        
        nFrames=nFrames+1;
      ]]>
    </script>
  </scripts> 

  <!-- resource definition -->
  <resources>
    <resource mime="model/vrml" id="1"  name="virtualab"   url="resources/virtualab.wrl"/>
    <resource mime="model/vrml" id="2"  name="surface"     url="resources/virtualab_surface.wrl"/>
    <resource mime="model/vrml" id="3"  name="cube"        url="resources/box.wrl"/>
    <resource mime="model/vrml" id="5"  name="ball"        url="resources/ball01.wrl"/>
    <resource mime="image/png"  id="6"  name="veRner"      url="resources/veRner_small.png" sizeX="6" sizeY="3"/>
    <resource mime="image/png"  id="7"  name="explo"       url="resources/explo.png" sizeX="3" sizeY="3" timeSpan="1.0" loop="true" tileX="4" tileY="4" usePitch="true"/>
  
    <resource mime="font/txf"    id="10" name="default"    url="default.txf" size="24"/>
    <resource mime="audio/wav" id="11" loop="true" url="resources/ding.wav"/>
    <resource mime="audio/wav" id="12" pitch="1.0" loop="true" attenuationDist="3.0" url="resources/riff01.wav"/>
    <resource mime="audio/wav" id="13" pitch="1.0" loop="true" url="resources/river.wav"/>

    <container                 id="20" name="box" shape="3" sound="12"/>
    <container                 id="21" name="ufo" shape="5" sound="13"/>

  </resources>

  <!-- scene and simulation initialization -->
  <scene id="0" script="main">
    <object id="0" name="observer" script="camera.lua" input="window"/>
    <object id="1" shape="1" surface="2" pos="0 0 0"/>
    <object id="3" shape="20" sound="20" pos="-5 5 0 225 0 0"/>
    <object id="5" shape="21" sound="21" pos="2 2 2" speed="0 2 0 30 0 0"/>
    <object id="6" shape="6" pos="0 7 5"/>
    <object id="7" shape="7" pos="-4.5 4.5 1.7"/>
    <object id="11" sound="11" pos="10 -10 0"/>

    <light id="0" enabled="1" position="-.5 -.75 1.0 0.0" ambient="0.3 0.3 0.3 1.0" diffuse="0.7 0.7 0.7 1.0" specular="1.0 1.0 1.0 1.0"/>
  </scene>

    <cdata_test>
        <chars><![CDATA[x<works>]]></chars>
        <tagged><![CDATA[<works>]]></tagged>
        <open><![CDATA[<]]></open>
        <close><![CDATA[>]]></close>
        <empty><![CDATA[]]></empty>
    </cdata_test>

</XperiML>
]==]

  -- load XML data
  local xfile = xml.eval(aaa)
  -- search for substatement having the tag "scene"
  local xscene = xfile:find("scene")
  -- if this substatement is found…
  if xscene ~= nil then
    --  …print it to screen
    print(xscene)
    --  print  tag, attribute id and first substatement
    print( xscene:tag(), xscene.id, xscene[1] )
  end
end

return xml